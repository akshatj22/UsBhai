{"ast":null,"code":"/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar Readable = require('stream').Readable;\n\n/**\n * expose\n * @ignore\n */\n\nmodule.exports = exports = GridReadStream;\n\n/**\n * GridReadStream\n *\n * @param {Grid} grid\n * @param {Object} options\n */\n\nfunction GridReadStream(grid, options) {\n  if (!(this instanceof GridReadStream)) return new GridReadStream(grid, options);\n  Readable.call(this);\n  this._opened = false;\n  this._opening = false;\n  this._closing = false;\n  this._end = false;\n  this._needToPush = false;\n  this._grid = grid;\n\n  // a bit backwards compatible\n  if (typeof options === 'string') {\n    options = {\n      filename: options\n    };\n  }\n  this.options = options || {};\n  if (options._id) {\n    this.id = grid.tryParseObjectId(options._id);\n    if (!this.id) {\n      this.id = options._id;\n    }\n  }\n  this.name = this.options.filename || '';\n  this.mode = 'r';\n\n  // If chunk size specified use it for read chunk size otherwise default to 255k (GridStore default). chunkSize and chunk_size in mongodb api so check both.\n  this._chunkSize = this.options.chunkSize || this.options.chunk_size || 1024 * 255;\n  this.range = this.options.range || {\n    startPos: 0,\n    endPos: undefined\n  };\n  if (typeof this.range.startPos === 'undefined') {\n    this.range.startPos = 0;\n  }\n  this._currentPos = this.range.startPos;\n  var options = {};\n  for (var i in this.options) {\n    options[i] = this.options[i];\n  }\n  options.root || (options.root = this._grid.curCol);\n  this._store = new grid.mongo.GridStore(grid.db, this.id || new grid.mongo.ObjectID(), this.name, this.mode, options);\n  // Workaround for Gridstore issue https://github.com/mongodb/node-mongodb-native/pull/930\n  if (!this.id) {\n    // var REFERENCE_BY_FILENAME = 0,\n    this._store.referenceBy = 0;\n  }\n  var self = this;\n\n  //Close the store once `end` received\n  this.on('end', function () {\n    self._end = true;\n    self._close();\n  });\n  process.nextTick(function () {\n    self._open();\n  });\n}\n\n/**\n * Inherit from stream.Readable\n * @ignore\n */\n\nutil.inherits(GridReadStream, Readable);\n\n/**\n * _open\n *\n * @api private\n */\n\nGridReadStream.prototype._open = function _open() {\n  if (this._opening) return;\n  this._opening = true;\n  var self = this;\n\n  // Open the sore\n  this._store.open(function (err, gs) {\n    if (err) return self._error(err);\n\n    // Find the length of the file by setting the head to the end of the file and requesting the position\n    self._store.seek(0, self._grid.mongo.GridStore.IO_SEEK_END, function (err) {\n      if (err) return self._error(err);\n\n      // Request the position of the end of the file\n      self._store.tell(function (err, position) {\n        if (err) return self._error(err);\n\n        // Calculate the correct end position either from EOF or end of range. Also handle incorrect range request.\n        if (!self.range.endPos || self.range.endPos > position - 1) {\n          self.range.endPos = position - 1;\n        }\n        ;\n\n        // Set the read head to the beginning of the file or start position if specified\n        self._store.seek(self.range.startPos, self._grid.mongo.GridStore.IO_SEEK_SET, function (err) {\n          if (err) return self._error(err);\n\n          // The store is now open\n          self.emit('open');\n          self._opened = true;\n\n          // If `_read()` was already called then we need to start pushing data to the stream. Otherwise `_read()` will handle this once called from stream.\n          if (self._needToPush) self._push();\n        });\n      });\n    });\n  });\n};\n\n/**\n * _read\n *\n * @api private\n */\n\n// `_read()` will be called when the stream wants to pull more data in\n// The advisory `size` argument is ignored in this case and user specified use or default to 255kk.\nGridReadStream.prototype._read = function _read(size) {\n  var self = this;\n\n  // Set `_needToPush` to true because the store may still be closed if data is immediately piped. Once the store is open `_needToPush` is checked and _push() called if necessary.\n  self._needToPush = true;\n\n  // The store must be open\n  if (!this._opened) return;\n\n  // Read data from GridStore and push to stream\n  self._push();\n};\n\n/**\n * _push\n *\n * @api private\n */\n\nGridReadStream.prototype._push = function _push() {\n  var self = this;\n\n  // Do not continue if the store is closed\n  if (!this._opened) return self._error('Unable to push data. Expected gridstore to be open');\n\n  // Check if EOF, if the full requested range has been pushed or if the stream must be destroyed. If so than push EOF-signalling `null` chunk\n  if (!this._store.eof() && self._currentPos <= self.range.endPos && !this._end) {\n    // Determine the chunk size for the read from GridStore\n    // Use default chunk size or user specified\n    var readChunkSize = self._chunkSize;\n    // Override the chunk size if the chunk size is more than the size that is left until EOF/range\n    if (self.range.endPos - self._currentPos < self._chunkSize) {\n      readChunkSize = self.range.endPos - self._currentPos + 1;\n    }\n    ;\n\n    // Read the chunk from GridSore. Head moves automatically after each read.\n    self._store.read(readChunkSize, function (err, data) {\n      // If error stop and close the store\n      if (err) return self._error(err);\n\n      // Advance the current position of the read head\n      self._currentPos += data.length;\n\n      // Push data\n      if (!self._end) self.push(data);\n    });\n  } else {\n    // Push EOF-signalling `null` chunk\n    this._end = true;\n    self.push(null);\n  }\n};\n\n/**\n * _close\n *\n * @api private\n */\n\nGridReadStream.prototype._close = function _close() {\n  var self = this;\n  if (!self._opened) return;\n  if (self._closing) return;\n  this._closing = true;\n\n  // Close the store and emit `close` event\n  self._store.close(function (err) {\n    if (err) return self._error(err);\n    self.emit('close');\n  });\n};\n\n/**\n * _error\n *\n * @api private\n */\n\nGridReadStream.prototype._error = function _error(err) {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n\n  // Emit the error event\n  this.emit('error', err);\n\n  // Close the gridsore if an error is received.\n  this._close();\n};\n\n/**\n * destroy\n *\n * @api public\n */\n\nGridReadStream.prototype.destroy = function destroy() {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n  this._close();\n};","map":{"version":3,"names":["util","require","Readable","module","exports","GridReadStream","grid","options","call","_opened","_opening","_closing","_end","_needToPush","_grid","filename","_id","id","tryParseObjectId","name","mode","_chunkSize","chunkSize","chunk_size","range","startPos","endPos","undefined","_currentPos","i","root","curCol","_store","mongo","GridStore","db","ObjectID","referenceBy","self","on","_close","process","nextTick","_open","inherits","prototype","open","err","gs","_error","seek","IO_SEEK_END","tell","position","IO_SEEK_SET","emit","_push","_read","size","eof","readChunkSize","read","data","length","push","close","destroy"],"sources":["D:/bot/Frontend/node_modules/gridfs-stream/lib/readstream.js"],"sourcesContent":["\n/**\n * Module dependencies\n */\n\nvar util = require('util');\nvar Readable  = require('stream').Readable;\n\n/**\n * expose\n * @ignore\n */\n\nmodule.exports = exports = GridReadStream;\n\n/**\n * GridReadStream\n *\n * @param {Grid} grid\n * @param {Object} options\n */\n\nfunction GridReadStream (grid, options) {\n  if (!(this instanceof GridReadStream))\n    return new GridReadStream(grid, options);\n\n  Readable.call(this);\n  this._opened = false;\n  this._opening = false;\n  this._closing = false;\n  this._end = false;\n  this._needToPush = false;\n\n  this._grid = grid;\n\n  // a bit backwards compatible\n  if (typeof options === 'string') {\n    options = { filename: options };\n  }\n\n  this.options = options || {};\n\n  if(options._id) {\n    this.id = grid.tryParseObjectId(options._id);\n\n    if(!this.id) {\n      this.id = options._id;\n    }\n  }\n\n  this.name = this.options.filename || '';\n  this.mode = 'r';\n\n  // If chunk size specified use it for read chunk size otherwise default to 255k (GridStore default). chunkSize and chunk_size in mongodb api so check both.\n  this._chunkSize = this.options.chunkSize || this.options.chunk_size || 1024 * 255;\n\n  this.range = this.options.range || { startPos: 0, endPos: undefined };\n  if (typeof(this.range.startPos) === 'undefined') {\n    this.range.startPos = 0;\n  }\n\n  this._currentPos = this.range.startPos;\n\n  var options = {};\n  for (var i in this.options) { options[i] = this.options[i]; }\n  options.root || (options.root = this._grid.curCol);\n\n  this._store = new grid.mongo.GridStore(grid.db, this.id || new grid.mongo.ObjectID(), this.name, this.mode, options);\n  // Workaround for Gridstore issue https://github.com/mongodb/node-mongodb-native/pull/930\n  if (!this.id) {\n    // var REFERENCE_BY_FILENAME = 0,\n    this._store.referenceBy = 0;\n  }\n\n  var self = this;\n\n  //Close the store once `end` received\n  this.on('end', function() {\n    self._end = true;\n    self._close()\n  });\n\n  process.nextTick(function() {\n    self._open();\n  });\n}\n\n/**\n * Inherit from stream.Readable\n * @ignore\n */\n\nutil.inherits(GridReadStream, Readable);\n\n/**\n * _open\n *\n * @api private\n */\n\nGridReadStream.prototype._open = function _open () {\n  if (this._opening) return;\n  this._opening = true;\n\n  var self = this;\n\n  // Open the sore\n  this._store.open(function (err, gs) {\n    if (err) return self._error(err);\n\n    // Find the length of the file by setting the head to the end of the file and requesting the position\n    self._store.seek(0, self._grid.mongo.GridStore.IO_SEEK_END, function(err) {\n        if (err) return self._error(err);\n\n        // Request the position of the end of the file\n        self._store.tell(function(err, position) {\n        if (err) return self._error(err);\n\n            // Calculate the correct end position either from EOF or end of range. Also handle incorrect range request.\n            if (!self.range.endPos || self.range.endPos > position-1) {self.range.endPos = position - 1};\n\n            // Set the read head to the beginning of the file or start position if specified\n            self._store.seek(self.range.startPos, self._grid.mongo.GridStore.IO_SEEK_SET, function(err) {\n              if (err) return self._error(err);\n\n              // The store is now open\n              self.emit('open');\n              self._opened = true;\n\n              // If `_read()` was already called then we need to start pushing data to the stream. Otherwise `_read()` will handle this once called from stream.\n              if (self._needToPush) self._push();\n            });\n        });\n    });\n  });\n}\n\n/**\n * _read\n *\n * @api private\n */\n\n// `_read()` will be called when the stream wants to pull more data in\n// The advisory `size` argument is ignored in this case and user specified use or default to 255kk.\nGridReadStream.prototype._read = function _read (size) {\n  var self = this;\n\n  // Set `_needToPush` to true because the store may still be closed if data is immediately piped. Once the store is open `_needToPush` is checked and _push() called if necessary.\n  self._needToPush = true;\n\n  // The store must be open\n  if (!this._opened) return;\n\n  // Read data from GridStore and push to stream\n  self._push();\n}\n\n/**\n * _push\n *\n * @api private\n */\n\nGridReadStream.prototype._push = function _push () {\n  var self = this;\n\n  // Do not continue if the store is closed\n  if (!this._opened) return self._error('Unable to push data. Expected gridstore to be open');\n\n  // Check if EOF, if the full requested range has been pushed or if the stream must be destroyed. If so than push EOF-signalling `null` chunk\n  if ( !this._store.eof() && (self._currentPos <= self.range.endPos) && !this._end) {\n\n    // Determine the chunk size for the read from GridStore\n    // Use default chunk size or user specified\n    var readChunkSize = self._chunkSize\n    // Override the chunk size if the chunk size is more than the size that is left until EOF/range\n    if (self.range.endPos-self._currentPos < self._chunkSize) {readChunkSize = self.range.endPos - self._currentPos + 1};\n\n    // Read the chunk from GridSore. Head moves automatically after each read.\n    self._store.read(readChunkSize,function(err, data) {\n\n      // If error stop and close the store\n      if (err) return self._error(err);\n\n      // Advance the current position of the read head\n      self._currentPos += data.length;\n\n      // Push data\n      if (!self._end) self.push(data)\n    })\n\n\n  } else {\n    // Push EOF-signalling `null` chunk\n    this._end = true;\n    self.push(null);\n  }\n}\n\n/**\n * _close\n *\n * @api private\n */\n\nGridReadStream.prototype._close = function _close () {\n  var self = this;\n  if (!self._opened) return;\n  if (self._closing) return;\n  this._closing = true;\n\n  // Close the store and emit `close` event\n  self._store.close(function (err) {\n    if (err) return self._error(err);\n    self.emit('close');\n  });\n}\n\n/**\n * _error\n *\n * @api private\n */\n\nGridReadStream.prototype._error = function _error (err) {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n\n  // Emit the error event\n  this.emit('error', err);\n\n  // Close the gridsore if an error is received.\n  this._close()\n}\n\n/**\n * destroy\n *\n * @api public\n */\n\nGridReadStream.prototype.destroy = function destroy () {\n  // Set end true so that no further reads from GridSotre are possible and close the store\n  this._end = true;\n  this._close();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}