{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\Frontend\\\\src\\\\chatUI\\\\inputBox\\\\input.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport style from './input.module.css';\nimport send from './assets/send.png';\nimport mic from './assets/mic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputBox(_ref) {\n  _s();\n  let {\n    sendMessage\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  // const [messages, setMessages] = useState([]);\n  const [listening, setListening] = useState(false);\n  const [recording, setRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const audioRef = useRef();\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  };\n\n  // const handleSend = () => {\n  //   if (inputValue || audioRef.current) {\n  //     const userMessage = {\n  //       type: 'sent',\n  //       text: inputValue,\n  //       audio: audioRef.current,\n  //     };\n  //     const botResponse = {\n  //       type: 'received',\n  //       text: 'This is a bot response',\n  //     };\n  //     setMessages([...messages, userMessage, botResponse]);\n  //     setInputValue('');\n  //     audioRef.current = null;\n  //   }\n  // };\n\n  const handleSend = () => {\n    if (inputValue || audioRef.current) {\n      sendMessage({\n        type: 'sent',\n        text: inputValue,\n        audio: audioRef.current\n      });\n      setInputValue('');\n      audioRef.current = null;\n    }\n  };\n\n  // const handleMicDown = () => {\n  //   navigator.mediaDevices.getUserMedia({ audio: true })\n  //     .then((stream) => {\n  //       const mediaRecorder = new MediaRecorder(stream);\n  //       setMediaRecorder(mediaRecorder);\n  //       mediaRecorder.start();\n  //       setRecording(true);\n  //     })\n  //     .catch((err) => {\n  //       console.log('Unable to access microphone: ', err);\n  //     });\n  // };\n\n  // const handleMicUp = () => {\n  //   mediaRecorder.stop();\n  //   setRecording(false);\n  // };\n\n  // const handleAudioData = (event) => {\n  //   const chunks = [];\n  //   chunks.push(event.data);\n  //   const audioBlob = new Blob(chunks, { type: 'audio/mp3' });\n  //   audioRef.current = audioBlob;\n  // };\n\n  // if (mediaRecorder) {\n  //   mediaRecorder.ondataavailable = handleAudioData;\n  //   mediaRecorder.onstop = handleMicUp;\n  // }\n\n  const handleMicDown = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      const mediaRecorder = new MediaRecorder(stream);\n      setMediaRecorder(mediaRecorder);\n      mediaRecorder.start();\n      setRecording(true);\n    }).catch(err => {\n      console.log('Unable to access microphone: ', err);\n    });\n  };\n  const handleMicUp = () => {\n    mediaRecorder.stop();\n    setRecording(false);\n  };\n  const handleAudioData = event => {\n    const chunks = [];\n    chunks.push(event.data);\n    // const audioBlob = new Blob(chunks, { type: 'audio/mp3' });\n    audioRef.current = audioBlob;\n  };\n  if (mediaRecorder) {\n    mediaRecorder.ondataavailable = handleAudioData;\n    mediaRecorder.onstop = handleMicUp;\n  }\n  return (\n    /*#__PURE__*/\n    // <div className={style.inputBox}>\n    // <div className={style.messages}>\n    //                <div className={style.userMessages}>\n    //       {messages\n    //         .filter((message) => message.type === 'sent')\n    //         .map((message, index) => (\n    //           <div key={index} className={`${style.message} ${style.sent}`}>\n    //             {message.text}\n    //             {message.audio && (\n    //               <audio controls>\n    //                 <source src={URL.createObjectURL(message.audio)} type=\"audio/wav\" />\n    //               </audio>\n    //             )}\n    //           </div>\n    //         ))}\n    //     </div>\n    //     <div className={style.botMessages}>\n    //       {messages\n    //         .filter((message) => message.type === 'received')\n    //         .map((message, index) => (\n    //           <div key={index} className={`${style.message} ${style.received}`}>\n    //             {message.text}\n    //           </div>\n    //         ))}\n    //     </div>\n    //   </div>\n    //   <div className={style.input}></div>\n    //   <i className=\"fas fa-grin\"></i>\n    //   <input\n    //     type=\"text\"\n    //     placeholder=\"Type a message\"\n    //     value={inputValue}\n    //     onChange={handleInputChange}\n    //     onKeyPress={handleKeyPress}\n    //   />\n    //   <img src={mic} alt=\"Microphone\"\n    //     onMouseDown={handleMicDown}\n    //     onMouseUp={handleMicUp}\n    //     onTouchStart={handleMicDown}\n    //     onTouchEnd={handleMicUp}\n    //   />\n    //   <img src={send} alt=\"Send\" onClick={handleSend} />\n    // </div>\n    _jsxDEV(\"div\", {\n      className: style.inputBox,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-grin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mic,\n        alt: \"Microphone\",\n        onMouseDown: handleMicDown,\n        onMouseUp: handleMicUp,\n        onTouchStart: handleMicDown,\n        onTouchEnd: handleMicUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: send,\n        alt: \"Send\",\n        onClick: handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(InputBox, \"w5TErLCF/X1qWGjw2LX3SQZkgSk=\");\n_c = InputBox;\nexport default InputBox;\nvar _c;\n$RefreshReg$(_c, \"InputBox\");","map":{"version":3,"names":["React","useState","useRef","style","send","mic","jsxDEV","_jsxDEV","InputBox","_ref","_s","sendMessage","inputValue","setInputValue","listening","setListening","recording","setRecording","mediaRecorder","setMediaRecorder","audioRef","handleInputChange","event","target","value","handleKeyPress","key","handleSend","current","type","text","audio","handleMicDown","navigator","mediaDevices","getUserMedia","then","stream","MediaRecorder","start","catch","err","console","log","handleMicUp","stop","handleAudioData","chunks","push","data","audioBlob","ondataavailable","onstop","className","inputBox","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onKeyPress","src","alt","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","onClick","_c","$RefreshReg$"],"sources":["D:/bot/Frontend/src/chatUI/inputBox/input.js"],"sourcesContent":["import React, { useState , useRef} from 'react';\nimport style from './input.module.css'\nimport send from './assets/send.png';\nimport mic from './assets/mic.png'\nfunction InputBox({ sendMessage }) {\n  const [inputValue, setInputValue] = useState('');\n  // const [messages, setMessages] = useState([]);\n  const [listening, setListening] = useState(false);\n  const [recording, setRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n\n  const audioRef = useRef();\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  }\n\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  }\n\n\n\n  // const handleSend = () => {\n  //   if (inputValue || audioRef.current) {\n  //     const userMessage = {\n  //       type: 'sent',\n  //       text: inputValue,\n  //       audio: audioRef.current,\n  //     };\n  //     const botResponse = {\n  //       type: 'received',\n  //       text: 'This is a bot response',\n  //     };\n  //     setMessages([...messages, userMessage, botResponse]);\n  //     setInputValue('');\n  //     audioRef.current = null;\n  //   }\n  // };\n\n  const handleSend = () => {\n    if (inputValue || audioRef.current) {\n      sendMessage({\n        type: 'sent',\n        text: inputValue,\n        audio: audioRef.current,\n      });\n      setInputValue('');\n      audioRef.current = null;\n    }\n  };\n\n  // const handleMicDown = () => {\n  //   navigator.mediaDevices.getUserMedia({ audio: true })\n  //     .then((stream) => {\n  //       const mediaRecorder = new MediaRecorder(stream);\n  //       setMediaRecorder(mediaRecorder);\n  //       mediaRecorder.start();\n  //       setRecording(true);\n  //     })\n  //     .catch((err) => {\n  //       console.log('Unable to access microphone: ', err);\n  //     });\n  // };\n  \n  // const handleMicUp = () => {\n  //   mediaRecorder.stop();\n  //   setRecording(false);\n  // };\n\n  // const handleAudioData = (event) => {\n  //   const chunks = [];\n  //   chunks.push(event.data);\n  //   const audioBlob = new Blob(chunks, { type: 'audio/mp3' });\n  //   audioRef.current = audioBlob;\n  // };\n  \n  // if (mediaRecorder) {\n  //   mediaRecorder.ondataavailable = handleAudioData;\n  //   mediaRecorder.onstop = handleMicUp;\n  // }\n\n  \n  const handleMicDown = () => {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        const mediaRecorder = new MediaRecorder(stream);\n        setMediaRecorder(mediaRecorder);\n        mediaRecorder.start();\n        setRecording(true);\n      })\n      .catch((err) => {\n        console.log('Unable to access microphone: ', err);\n      });\n  };\n\n  const handleMicUp = () => {\n    mediaRecorder.stop();\n    setRecording(false);\n  };\n\n  const handleAudioData = (event) => {\n    const chunks = [];\n    chunks.push(event.data);\n    // const audioBlob = new Blob(chunks, { type: 'audio/mp3' });\n    audioRef.current = audioBlob;\n  };\n\n  if (mediaRecorder) {\n    mediaRecorder.ondataavailable = handleAudioData;\n    mediaRecorder.onstop = handleMicUp;\n  }\n\n\n\n\n  return (\n\n    // <div className={style.inputBox}>\n    // <div className={style.messages}>\n\n    //                <div className={style.userMessages}>\n    //       {messages\n    //         .filter((message) => message.type === 'sent')\n    //         .map((message, index) => (\n    //           <div key={index} className={`${style.message} ${style.sent}`}>\n    //             {message.text}\n    //             {message.audio && (\n    //               <audio controls>\n    //                 <source src={URL.createObjectURL(message.audio)} type=\"audio/wav\" />\n    //               </audio>\n    //             )}\n    //           </div>\n    //         ))}\n    //     </div>\n    //     <div className={style.botMessages}>\n    //       {messages\n    //         .filter((message) => message.type === 'received')\n    //         .map((message, index) => (\n    //           <div key={index} className={`${style.message} ${style.received}`}>\n    //             {message.text}\n    //           </div>\n    //         ))}\n    //     </div>\n    //   </div>\n    //   <div className={style.input}></div>\n    //   <i className=\"fas fa-grin\"></i>\n    //   <input\n    //     type=\"text\"\n    //     placeholder=\"Type a message\"\n    //     value={inputValue}\n    //     onChange={handleInputChange}\n    //     onKeyPress={handleKeyPress}\n    //   />\n    //   <img src={mic} alt=\"Microphone\"\n\n    //     onMouseDown={handleMicDown}\n    //     onMouseUp={handleMicUp}\n    //     onTouchStart={handleMicDown}\n    //     onTouchEnd={handleMicUp}\n\n    //   />\n    //   <img src={send} alt=\"Send\" onClick={handleSend} />\n\n    // </div>\n    <div className={style.inputBox}>\n    <i className=\"fas fa-grin\"></i>\n    <input\n      type=\"text\"\n      placeholder=\"Type a message\"\n      value={inputValue}\n      onChange={handleInputChange}\n      onKeyPress={handleKeyPress}\n    />\n    <img\n      src={mic}\n      alt=\"Microphone\"\n      onMouseDown={handleMicDown}\n      onMouseUp={handleMicUp}\n      onTouchStart={handleMicDown}\n      onTouchEnd={handleMicUp}\n    />\n    <img src={send} alt=\"Send\" onClick={handleSend} />\n  </div>\n  );\n}\n\nexport default InputBox;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAGC,MAAM,QAAO,OAAO;AAC/C,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,GAAG,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAClC,SAASC,QAAQA,CAAAC,IAAA,EAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAY,CAAC,GAAAF,IAAA;EAC/B,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMmB,QAAQ,GAAGlB,MAAM,EAAE;EAEzB,MAAMmB,iBAAiB,GAAIC,KAAK,IAAK;IACnCT,aAAa,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAGD,MAAMC,cAAc,GAAIH,KAAK,IAAK;IAChC,IAAIA,KAAK,CAACI,GAAG,KAAK,OAAO,EAAE;MACzBC,UAAU,EAAE;IACd;EACF,CAAC;;EAID;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIf,UAAU,IAAIQ,QAAQ,CAACQ,OAAO,EAAE;MAClCjB,WAAW,CAAC;QACVkB,IAAI,EAAE,MAAM;QACZC,IAAI,EAAElB,UAAU;QAChBmB,KAAK,EAAEX,QAAQ,CAACQ;MAClB,CAAC,CAAC;MACFf,aAAa,CAAC,EAAE,CAAC;MACjBO,QAAQ,CAACQ,OAAO,GAAG,IAAI;IACzB;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1BC,SAAS,CAACC,YAAY,CACnBC,YAAY,CAAC;MAAEJ,KAAK,EAAE;IAAK,CAAC,CAAC,CAC7BK,IAAI,CAAEC,MAAM,IAAK;MAChB,MAAMnB,aAAa,GAAG,IAAIoB,aAAa,CAACD,MAAM,CAAC;MAC/ClB,gBAAgB,CAACD,aAAa,CAAC;MAC/BA,aAAa,CAACqB,KAAK,EAAE;MACrBtB,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,CACDuB,KAAK,CAAEC,GAAG,IAAK;MACdC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,GAAG,CAAC;IACnD,CAAC,CAAC;EACN,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxB1B,aAAa,CAAC2B,IAAI,EAAE;IACpB5B,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAM6B,eAAe,GAAIxB,KAAK,IAAK;IACjC,MAAMyB,MAAM,GAAG,EAAE;IACjBA,MAAM,CAACC,IAAI,CAAC1B,KAAK,CAAC2B,IAAI,CAAC;IACvB;IACA7B,QAAQ,CAACQ,OAAO,GAAGsB,SAAS;EAC9B,CAAC;EAED,IAAIhC,aAAa,EAAE;IACjBA,aAAa,CAACiC,eAAe,GAAGL,eAAe;IAC/C5B,aAAa,CAACkC,MAAM,GAAGR,WAAW;EACpC;EAKA;IAAA;IAEE;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IAEA;IACArC,OAAA;MAAK8C,SAAS,EAAElD,KAAK,CAACmD,QAAS;MAAAC,QAAA,gBAC/BhD,OAAA;QAAG8C,SAAS,EAAC;MAAa;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC/BpD,OAAA;QACEsB,IAAI,EAAC,MAAM;QACX+B,WAAW,EAAC,gBAAgB;QAC5BpC,KAAK,EAAEZ,UAAW;QAClBiD,QAAQ,EAAExC,iBAAkB;QAC5ByC,UAAU,EAAErC;MAAe;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3B,eACFpD,OAAA;QACEwD,GAAG,EAAE1D,GAAI;QACT2D,GAAG,EAAC,YAAY;QAChBC,WAAW,EAAEjC,aAAc;QAC3BkC,SAAS,EAAEtB,WAAY;QACvBuB,YAAY,EAAEnC,aAAc;QAC5BoC,UAAU,EAAExB;MAAY;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACxB,eACFpD,OAAA;QAAKwD,GAAG,EAAE3D,IAAK;QAAC4D,GAAG,EAAC,MAAM;QAACK,OAAO,EAAE1C;MAAW;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC9C;AAER;AAACjD,EAAA,CAzLQF,QAAQ;AAAA8D,EAAA,GAAR9D,QAAQ;AA2LjB,eAAeA,QAAQ;AAAC,IAAA8D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}