{"ast":null,"code":"// gridfs-stream\n\n/**\n * Module dependencies.\n */\n\nvar GridWriteStream = require('./writestream');\nvar GridReadStream = require('./readstream');\n\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\nfunction Grid(db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)');\n\n  // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n};\n\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n};\n\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n};\n\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n  if (!_id) {\n    _id = options.filename;\n  }\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n};\n\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.exist = function (options, callback) {\n  var _id;\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n  if (!_id) {\n    _id = options.filename;\n  }\n  return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n};\n\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n  var find = {};\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n  var collection = options.root && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n  collection.find(find, function (err, cursor) {\n    if (err) {\n      return callback(err);\n    }\n    if (!cursor) {\n      return callback(new Error('Collection not found'));\n    }\n    cursor.nextObject(callback);\n  });\n};\n\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId(string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n};\n\n/**\n * expose\n */\n\nmodule.exports = exports = Grid;","map":{"version":3,"names":["GridWriteStream","require","GridReadStream","Grid","db","mongo","undefined","Error","curCol","GridStore","DEFAULT_ROOT_COLLECTION","prototype","createWriteStream","options","createReadStream","Object","defineProperty","get","_col","collection","name","remove","callback","_id","tryParseObjectId","filename","unlink","exist","root","findOne","find","n","files","err","cursor","nextObject","string","ObjectID","_","module","exports"],"sources":["D:/bot/Frontend/node_modules/gridfs-stream/lib/index.js"],"sourcesContent":["// gridfs-stream\n\n/**\n * Module dependencies.\n */\n\nvar GridWriteStream = require('./writestream')\nvar GridReadStream = require('./readstream')\n\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\nfunction Grid (db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)');\n\n  // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n}\n\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n}\n\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n}\n\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n  if (!_id) {\n    _id = options.filename;\n  }\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n}\n\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.exist = function (options, callback) {\n    var _id;\n    if (options._id) {\n        _id = this.tryParseObjectId(options._id) || options._id;\n    }\n    if (!_id) {\n        _id = options.filename;\n    }\n    return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n}\n\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n  var find = {};\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n  var collection = options.root  && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n  collection.find(find, function(err, cursor) {\n    if (err) { return callback(err); }\n    if (!cursor) { return callback(new Error('Collection not found')); }\n    cursor.nextObject(callback);\n  });\n}\n\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId (string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n}\n\n/**\n * expose\n */\n\nmodule.exports = exports = Grid;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}