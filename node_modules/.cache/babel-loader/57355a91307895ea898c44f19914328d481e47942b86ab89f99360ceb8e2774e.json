{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\src\\\\chatUI\\\\inputBox\\\\input.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport style from './input.module.css';\nimport send from './assets/send.png';\nimport mic from './assets/mic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputBox(_ref) {\n  _s();\n  let {\n    sendMessage\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [listening, setListening] = useState(false);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  };\n  const handleSend = () => {\n    if (inputValue) {\n      const newMessage = {\n        type: 'sent',\n        text: inputValue\n      };\n      setMessages([...messages, newMessage]);\n      setInputValue('');\n      setTimeout(() => {\n        const botResponse = {\n          type: 'received',\n          text: 'This is a bot response'\n        };\n        setMessages([...messages, botResponse]);\n      }, 1000); // simulate bot response delay\n    }\n  };\n\n  const handleMicClick = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.start();\n    recognition.onresult = event => {\n      const speechToText = event.results[0][0].transcript;\n      setInputValue(speechToText);\n    };\n    recognition.onerror = event => {\n      console.log('Speech recognition error occurred: ', event.error);\n    };\n  };\n  return (\n    /*#__PURE__*/\n    // <div className={style.inputBox}>\n    //   <div className={style.messages}>\n    //     {messages.map((message, index) => (\n    //       <div\n    //         key={index}\n    //         className={style.message + ' ' + style[message.type]}\n    //       >\n    //         {message.text}\n    //       </div>\n    //     ))}\n    //   </div>\n    _jsxDEV(\"div\", {\n      className: style.inputBox,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.messages,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.userMessages,\n          children: messages.filter(message => message.type === 'sent').map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.message + ' ' + style[message.type],\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.botMessages,\n          children: messages.filter(message => message.type === 'received').map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style.message + ' ' + style[message.type],\n            children: message.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.input\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-grin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message\",\n        value: inputValue,\n        onChange: handleInputChange,\n        onKeyPress: handleKeyPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mic,\n        alt: \"Microphone\",\n        onClick: handleMicClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: send,\n        alt: \"Send\",\n        onClick: handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(InputBox, \"mOEuo7r0c2uTRp/BcZI3PVLjjls=\");\n_c = InputBox;\nexport default InputBox;\nvar _c;\n$RefreshReg$(_c, \"InputBox\");","map":{"version":3,"names":["React","useState","style","send","mic","jsxDEV","_jsxDEV","InputBox","_ref","_s","sendMessage","inputValue","setInputValue","messages","setMessages","listening","setListening","handleInputChange","event","target","value","handleKeyPress","key","handleSend","newMessage","type","text","setTimeout","botResponse","handleMicClick","recognition","window","webkitSpeechRecognition","lang","start","onresult","speechToText","results","transcript","onerror","console","log","error","className","inputBox","children","userMessages","filter","message","map","index","fileName","_jsxFileName","lineNumber","columnNumber","botMessages","input","placeholder","onChange","onKeyPress","src","alt","onClick","_c","$RefreshReg$"],"sources":["D:/bot/src/chatUI/inputBox/input.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport style from './input.module.css'\r\nimport send from './assets/send.png';\r\nimport mic from './assets/mic.png'\r\nfunction InputBox({ sendMessage }) {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [listening, setListening] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  }\r\n\r\n\r\n  const handleSend = () => {\r\n    if (inputValue) {\r\n      const newMessage = {\r\n        type: 'sent',\r\n        text: inputValue,\r\n      };\r\n      setMessages([...messages, newMessage]);\r\n      setInputValue('');\r\n      setTimeout(() => {\r\n        const botResponse = {\r\n          type: 'received',\r\n          text: 'This is a bot response',\r\n        };\r\n        setMessages([...messages, botResponse]);\r\n      }, 1000); // simulate bot response delay\r\n    }\r\n  }\r\n\r\n\r\n  const handleMicClick = () => {\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.lang = 'en-US';\r\n    recognition.start();\r\n    recognition.onresult = (event) => {\r\n      const speechToText = event.results[0][0].transcript;\r\n      setInputValue(speechToText);\r\n    };\r\n    recognition.onerror = (event) => {\r\n      console.log('Speech recognition error occurred: ', event.error);\r\n    };\r\n  };\r\n\r\n\r\n  return (\r\n    // <div className={style.inputBox}>\r\n    //   <div className={style.messages}>\r\n    //     {messages.map((message, index) => (\r\n    //       <div\r\n    //         key={index}\r\n    //         className={style.message + ' ' + style[message.type]}\r\n    //       >\r\n    //         {message.text}\r\n    //       </div>\r\n    //     ))}\r\n    //   </div>\r\n    <div className={style.inputBox}>\r\n    <div className={style.messages}>\r\n      <div className={style.userMessages}>\r\n        {messages.filter((message) => message.type === 'sent').map((message, index) => (\r\n          <div key={index} className={style.message + ' ' + style[message.type]}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className={style.botMessages}>\r\n        {messages.filter((message) => message.type === 'received').map((message, index) => (\r\n          <div key={index} className={style.message + ' ' + style[message.type]}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n      <div className={style.input}></div>\r\n      <i className=\"fas fa-grin\"></i>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type a message\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <img src={mic} alt=\"Microphone\"\r\n        onClick={handleMicClick}\r\n\r\n      />\r\n      <img src={send} alt=\"Send\" onClick={handleSend} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}