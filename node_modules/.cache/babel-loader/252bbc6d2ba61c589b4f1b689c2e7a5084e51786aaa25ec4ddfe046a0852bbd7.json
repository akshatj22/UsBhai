{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\Frontend\\\\src\\\\Body\\\\Container\\\\Container.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport style from './container.module.css';\nimport ChatHeader from \"../../chatUI/header/header\";\nimport InputBox from \"../../chatUI/inputBox/input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Container() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const sendMessage = message => {\n    const userMessage = {\n      type: 'sent',\n      text: message.text,\n      audio: message.audio\n    };\n    const botResponse = {\n      type: 'received',\n      text: 'This is a bot response'\n    };\n    setMessages([...messages, userMessage, botResponse]);\n  };\n  return (\n    /*#__PURE__*/\n    //     <div className={style.container}>\n    //     <div className={style.box}>\n    //        <ChatHeader contactName=\"UsBhai\" />\n    //        <InputBox sendMessage=\"Hiiii\" />\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: style.container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.box,\n        children: [/*#__PURE__*/_jsxDEV(ChatHeader, {\n          contactName: \"UsBhai\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style.chatArea,\n          children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `${style.chatBubble} ${message.type === 'sent' ? style.sent : style.received}`,\n            children: [message.text, message.audio && /*#__PURE__*/_jsxDEV(\"audio\", {\n              controls: true,\n              children: /*#__PURE__*/_jsxDEV(\"source\", {\n                src: URL.createObjectURL(message.audio),\n                type: \"audio/wav\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 15\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(InputBox, {\n          sendMessage: sendMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(Container, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = Container;\nexport default Container;\nconst MongoClient = require('mongodb').MongoClient;\nconst Grid = require('gridfs-stream');\nasync function saveAudioToMongoDB(message) {\n  const url = 'mongodb://localhost:27017/mydb';\n  const client = new MongoClient(url, {\n    useUnifiedTopology: true\n  });\n  try {\n    await client.connect();\n    const db = client.db();\n    const gfs = Grid(db, mongo);\n    const writeStream = gfs.createWriteStream({\n      filename: 'audio.wav',\n      mode: 'w',\n      content_type: 'audio/wav',\n      metadata: {\n        // add any metadata you want to associate with the file\n      }\n    });\n\n    // pipe the audio file to the write stream\n    message.audio.pipe(writeStream);\n\n    // when the write stream is finished, update the messages array with the file's ID\n    writeStream.on('close', function (file) {\n      const userMessage = {\n        type: 'sent',\n        text: message.text,\n        audio: file._id\n      };\n      setMessages([...messages, userMessage, botResponse]);\n    });\n  } catch (error) {\n    console.error(error);\n  } finally {\n    await client.close();\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","useState","style","ChatHeader","InputBox","jsxDEV","_jsxDEV","Container","_s","messages","setMessages","sendMessage","message","userMessage","type","text","audio","botResponse","className","container","children","box","contactName","fileName","_jsxFileName","lineNumber","columnNumber","chatArea","map","index","chatBubble","sent","received","controls","src","URL","createObjectURL","_c","MongoClient","require","Grid","saveAudioToMongoDB","url","client","useUnifiedTopology","connect","db","gfs","mongo","writeStream","createWriteStream","filename","mode","content_type","metadata","pipe","on","file","_id","error","console","close","$RefreshReg$"],"sources":["D:/bot/Frontend/src/Body/Container/Container.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport style from './container.module.css'\r\nimport ChatHeader from \"../../chatUI/header/header\";\r\nimport InputBox from \"../../chatUI/inputBox/input\";\r\nfunction Container(){\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const sendMessage = (message) => {\r\n      const userMessage = {\r\n        type: 'sent',\r\n        text: message.text,\r\n        audio: message.audio,\r\n      };\r\n      const botResponse = {\r\n        type: 'received',\r\n        text: 'This is a bot response',\r\n      };\r\n      setMessages([...messages, userMessage, botResponse]);\r\n    };\r\n    return(\r\n    //     <div className={style.container}>\r\n    //     <div className={style.box}>\r\n    //        <ChatHeader contactName=\"UsBhai\" />\r\n    //        <InputBox sendMessage=\"Hiiii\" />\r\n          \r\n    //     </div>\r\n    // </div>\r\n    <div className={style.container}>\r\n    <div className={style.box}>\r\n      <ChatHeader contactName=\"UsBhai\" />\r\n      <div className={style.chatArea}>\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={`${style.chatBubble} ${message.type === 'sent' ? style.sent : style.received}`}\r\n          >\r\n            {message.text}\r\n            {message.audio && (\r\n              <audio controls>\r\n                <source  src={URL.createObjectURL(message.audio)} type=\"audio/wav\" />\r\n              </audio>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <InputBox sendMessage={sendMessage} />\r\n    </div>\r\n  </div>\r\n    )\r\n}\r\n\r\nexport default Container;\r\n\r\n\r\n\r\nconst MongoClient = require('mongodb').MongoClient;\r\nconst Grid = require('gridfs-stream');\r\n\r\nasync function saveAudioToMongoDB(message) {\r\n  const url = 'mongodb://localhost:27017/mydb';\r\n  const client = new MongoClient(url, { useUnifiedTopology: true });\r\n\r\n  try {\r\n    await client.connect();\r\n    const db = client.db();\r\n    const gfs = Grid(db, mongo);\r\n\r\n    const writeStream = gfs.createWriteStream({\r\n      filename: 'audio.wav',\r\n      mode: 'w',\r\n      content_type: 'audio/wav',\r\n      metadata: {\r\n        // add any metadata you want to associate with the file\r\n      }\r\n    });\r\n\r\n    // pipe the audio file to the write stream\r\n    message.audio.pipe(writeStream);\r\n\r\n    // when the write stream is finished, update the messages array with the file's ID\r\n    writeStream.on('close', function (file) {\r\n      const userMessage = {\r\n        type: 'sent',\r\n        text: message.text,\r\n        audio: file._id,\r\n      };\r\n      setMessages([...messages, userMessage, botResponse]);\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error(error);\r\n  } finally {\r\n    await client.close();\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}