{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\src\\\\chatUI\\\\inputBox\\\\input.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport style from './input.module.css';\nimport send from './assets/send.png';\nimport mic from './assets/mic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputBox(_ref) {\n  _s();\n  let {\n    sendMessage\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [listening, setListening] = useState(false);\n  const [recording, setRecording] = useState(false);\n  const audioRef = useRef();\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  };\n\n  // const handleSend = () => {\n  //   if (inputValue) {\n  //     const userMessage = {\n  //       type: 'sent',\n  //       text: inputValue,\n  //     };\n  //     const botResponse = {\n  //       type: 'received',\n  //       text: 'This is a bot response',\n  //     };\n  //     setMessages([...messages, userMessage, botResponse]);\n  //     setInputValue('');\n  //   }\n  // };\n  const handleSend = () => {\n    if (inputValue || audioRef.current) {\n      const userMessage = {\n        type: 'sent',\n        text: inputValue,\n        audio: audioRef.current\n      };\n      const botResponse = {\n        type: 'received',\n        text: 'This is a bot response'\n      };\n      setMessages([...messages, userMessage, botResponse]);\n      setInputValue('');\n      audioRef.current = null;\n    }\n  };\n  const handleMicDown = () => {\n    setRecording(true);\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\n    const audioContext = new AudioContext();\n    const mediaStream = navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const mediaRecorder = new MediaRecorder(audioContext.createMediaStreamSource(mediaStream));\n    const chunks = [];\n    mediaRecorder.addEventListener('dataavailable', event => {\n      chunks.push(event.data);\n    });\n    mediaRecorder.addEventListener('stop', () => {\n      const audioBlob = new Blob(chunks);\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n      audioRef.current = audio;\n    });\n    mediaRecorder.start();\n  };\n  const handleMicClick = () => {\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.start();\n    recognition.onresult = event => {\n      const speechToText = event.results[0][0].transcript;\n      setInputValue(speechToText);\n    };\n    recognition.onerror = event => {\n      console.log('Speech recognition error occurred: ', event.error);\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-grin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type a message\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: mic,\n      alt: \"Microphone\",\n      onClick: handleMicClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: send,\n      alt: \"Send\",\n      onClick: handleSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(InputBox, \"g0q+GUFtPVbbHDxpqRKwsLsC2W0=\");\n_c = InputBox;\nexport default InputBox;\nvar _c;\n$RefreshReg$(_c, \"InputBox\");","map":{"version":3,"names":["React","useState","useRef","style","send","mic","jsxDEV","_jsxDEV","InputBox","_ref","_s","sendMessage","inputValue","setInputValue","messages","setMessages","listening","setListening","recording","setRecording","audioRef","handleInputChange","event","target","value","handleKeyPress","key","handleSend","current","userMessage","type","text","audio","botResponse","handleMicDown","AudioContext","window","webkitAudioContext","audioContext","mediaStream","navigator","mediaDevices","getUserMedia","mediaRecorder","MediaRecorder","createMediaStreamSource","chunks","addEventListener","push","data","audioBlob","Blob","audioUrl","URL","createObjectURL","Audio","play","start","handleMicClick","recognition","webkitSpeechRecognition","lang","onresult","speechToText","results","transcript","onerror","console","log","error","className","inputBox","children","fileName","_jsxFileName","lineNumber","columnNumber","input","placeholder","onChange","onKeyPress","src","alt","onClick","_c","$RefreshReg$"],"sources":["D:/bot/src/chatUI/inputBox/input.js"],"sourcesContent":["import React, { useState , useRef} from 'react';\r\nimport style from './input.module.css'\r\nimport send from './assets/send.png';\r\nimport mic from './assets/mic.png'\r\nfunction InputBox({ sendMessage }) {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [listening, setListening] = useState(false);\r\n  const [recording, setRecording] = useState(false);\r\n\r\n  const audioRef = useRef();\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // const handleSend = () => {\r\n  //   if (inputValue) {\r\n  //     const userMessage = {\r\n  //       type: 'sent',\r\n  //       text: inputValue,\r\n  //     };\r\n  //     const botResponse = {\r\n  //       type: 'received',\r\n  //       text: 'This is a bot response',\r\n  //     };\r\n  //     setMessages([...messages, userMessage, botResponse]);\r\n  //     setInputValue('');\r\n  //   }\r\n  // };\r\n  const handleSend = () => {\r\n    if (inputValue || audioRef.current) {\r\n      const userMessage = {\r\n        type: 'sent',\r\n        text: inputValue,\r\n        audio: audioRef.current,\r\n      };\r\n      const botResponse = {\r\n        type: 'received',\r\n        text: 'This is a bot response',\r\n      };\r\n      setMessages([...messages, userMessage, botResponse]);\r\n      setInputValue('');\r\n      audioRef.current = null;\r\n    }\r\n  };\r\n\r\n  const handleMicDown = () => {\r\n    setRecording(true);\r\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    const audioContext = new AudioContext();\r\n    const mediaStream = navigator.mediaDevices.getUserMedia({ audio: true });\r\n    const mediaRecorder = new MediaRecorder(audioContext.createMediaStreamSource(mediaStream));\r\n    const chunks = [];\r\n\r\n    mediaRecorder.addEventListener('dataavailable', (event) => {\r\n      chunks.push(event.data);\r\n    });\r\n\r\n    mediaRecorder.addEventListener('stop', () => {\r\n      const audioBlob = new Blob(chunks);\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n      audioRef.current = audio;\r\n    });\r\n\r\n    mediaRecorder.start();\r\n  };\r\n  \r\n\r\n  \r\n\r\n\r\n  const handleMicClick = () => {\r\n    const recognition = new window.webkitSpeechRecognition();\r\n    recognition.lang = 'en-US';\r\n    recognition.start();\r\n    recognition.onresult = (event) => {\r\n      const speechToText = event.results[0][0].transcript;\r\n      setInputValue(speechToText);\r\n    };\r\n    recognition.onerror = (event) => {\r\n      console.log('Speech recognition error occurred: ', event.error);\r\n    };\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    <div className={style.inputBox}>\r\n    <div className={style.messages}>\r\n      {/* <div className={style.userMessages}>\r\n        {messages.filter((message) => message.type === 'sent').map((message, index) => (\r\n          <div key={index} className={style.message + ' ' + style[message.type]}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className={style.botMessages}>\r\n        {messages.filter((message) => message.type === 'received').map((message, index) => (\r\n          <div key={index} className={style.message + ' ' + style[message.type]}>\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div> */}\r\n    </div>\r\n      <div className={style.input}></div>\r\n      <i className=\"fas fa-grin\"></i>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type a message\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <img src={mic} alt=\"Microphone\"\r\n        onClick={handleMicClick}\r\n\r\n      />\r\n      <img src={send} alt=\"Send\" onClick={handleSend} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}