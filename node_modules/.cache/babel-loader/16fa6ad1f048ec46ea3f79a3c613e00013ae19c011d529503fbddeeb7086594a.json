{"ast":null,"code":"var _jsxFileName = \"D:\\\\bot\\\\src\\\\chatUI\\\\inputBox\\\\input.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport style from './input.module.css';\nimport send from './assets/send.png';\nimport mic from './assets/mic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputBox(_ref) {\n  _s();\n  let {\n    sendMessage\n  } = _ref;\n  const [inputValue, setInputValue] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [recognition, setRecognition] = useState(null);\n  const [isListening, setIsListening] = useState(false);\n  const [listening, setListening] = useState(false);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  };\n  const handleSend = () => {\n    if (inputValue) {\n      const newMessage = {\n        type: 'sent',\n        text: inputValue\n      };\n      setMessages([...messages, newMessage]);\n      setInputValue('');\n      setTimeout(() => {\n        const botResponse = {\n          type: 'received',\n          text: 'This is a bot response'\n        };\n        setMessages([...messages, botResponse]);\n      }, 1000); // simulate bot response delay\n    }\n  };\n\n  const handleMicClick = () => {\n    if (!recognition) {\n      const newRecognition = new window.webkitSpeechRecognition();\n      newRecognition.continuous = true;\n      newRecognition.interimResults = true;\n      newRecognition.lang = 'en-US';\n      newRecognition.onresult = event => {\n        let finalTranscript = '';\n        let interimTranscript = '';\n        for (let i = event.resultIndex; i < event.results.length; i++) {\n          const transcript = event.results[i][0].transcript;\n          if (event.results[i].isFinal) {\n            finalTranscript += transcript;\n          } else {\n            interimTranscript += transcript;\n          }\n        }\n        setInputValue(finalTranscript);\n      };\n      setRecognition(newRecognition);\n    }\n    if (!isListening) {\n      setIsListening(true);\n      recognition.start();\n    } else {\n      setIsListening(false);\n      recognition.stop();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.inputBox,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.messages,\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.message + ' ' + style[message.type],\n        children: message.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"fas fa-grin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Type a message\",\n      value: inputValue,\n      onChange: handleInputChange,\n      onKeyPress: handleKeyPress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: mic,\n      alt: \"Microphone\",\n      onClick: handleMicClick,\n      className: isListening ? style.active : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: send,\n      alt: \"Send\",\n      onClick: handleSend\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(InputBox, \"AKCRSyzS6q+uNhBWlJkxhxWn4OQ=\");\n_c = InputBox;\nexport default InputBox;\nvar _c;\n$RefreshReg$(_c, \"InputBox\");","map":{"version":3,"names":["React","useState","style","send","mic","jsxDEV","_jsxDEV","InputBox","_ref","_s","sendMessage","inputValue","setInputValue","messages","setMessages","recognition","setRecognition","isListening","setIsListening","listening","setListening","handleInputChange","event","target","value","handleKeyPress","key","handleSend","newMessage","type","text","setTimeout","botResponse","handleMicClick","newRecognition","window","webkitSpeechRecognition","continuous","interimResults","lang","onresult","finalTranscript","interimTranscript","i","resultIndex","results","length","transcript","isFinal","start","stop","className","inputBox","children","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","input","placeholder","onChange","onKeyPress","src","alt","onClick","active","_c","$RefreshReg$"],"sources":["D:/bot/src/chatUI/inputBox/input.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport style from './input.module.css'\r\nimport send from './assets/send.png';\r\nimport mic from './assets/mic.png'\r\nfunction InputBox({ sendMessage }) {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [recognition, setRecognition] = useState(null);\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [listening, setListening] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  }\r\n\r\n  \r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  }\r\n  \r\n\r\n  const handleSend = () => {\r\n    if (inputValue) {\r\n      const newMessage = {\r\n        type: 'sent',\r\n        text: inputValue,\r\n      };\r\n      setMessages([...messages, newMessage]);\r\n      setInputValue('');\r\n      setTimeout(() => {\r\n        const botResponse = {\r\n          type: 'received',\r\n          text: 'This is a bot response',\r\n        };\r\n        setMessages([...messages, botResponse]);\r\n      }, 1000); // simulate bot response delay\r\n    }\r\n  }\r\n  const handleMicClick = () => {\r\n    if (!recognition) {\r\n      const newRecognition = new window.webkitSpeechRecognition();\r\n      newRecognition.continuous = true;\r\n      newRecognition.interimResults = true;\r\n      newRecognition.lang = 'en-US';\r\n      newRecognition.onresult = (event) => {\r\n        let finalTranscript = '';\r\n        let interimTranscript = '';\r\n        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n          const transcript = event.results[i][0].transcript;\r\n          if (event.results[i].isFinal) {\r\n            finalTranscript += transcript;\r\n          } else {\r\n            interimTranscript += transcript;\r\n          }\r\n        }\r\n        setInputValue(finalTranscript);\r\n      };\r\n      setRecognition(newRecognition);\r\n    }\r\n\r\n    if (!isListening) {\r\n      setIsListening(true);\r\n      recognition.start();\r\n    } else {\r\n      setIsListening(false);\r\n      recognition.stop();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={style.inputBox}>\r\n       <div className={style.messages}>\r\n        {messages.map((message, index) => (\r\n          <div\r\n            key={index}\r\n            className={style.message + ' ' + style[message.type]}\r\n          >\r\n            {message.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className={style.input}></div>\r\n      <i className=\"fas fa-grin\"></i>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Type a message\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <img src={mic} alt=\"Microphone\"\r\n              onClick={handleMicClick}\r\n              className={isListening ? style.active : ''}\r\n               />\r\n      <img src={send} alt=\"Send\" onClick={handleSend} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InputBox;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}